<?xml version="1.0" encoding="UTF-8"?>
<model version="5.2.5" links="1">
 <documentation>About this example:
-------------------
Simple &quot;Blinky&quot; console application for workstations (Windows, Linux, MacOS)
(see &quot;QM Tutorial&quot; at: https://www.state-machine.com/qm/gs_tut.html)

This example demonstrates:
- Active object (Blinky) with state machine
- Board Support Package abstraction for portability
- BSP implementation for desktop OS (Windows, Linux, MacOS)
- Platform-independent main() function
- Makefile to build the generated code on desktop OS (Windows, Linux, MacOS)
- Customized tools for building the generated code directly from QM

Building the example:
---------------------
To build this example, you will need the QP/C framework installed on your computer and the GNU-GCC compiler. Both of them will be available if you install the QP-bundle from:

https://www.state-machine.com/#Downloads

Running the example:
--------------------
This example is a simple console application, which you can run from a terminal.

For more QM examples for QP/C see:
https://www.state-machine.com/qpc/exa.html</documentation>
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::GATT_DEVICE_MANAGER}-->
  <class name="GATT_DEVICE_MANAGER" superclass="qpc::QActive">
   <!--${AOs::GATT_DEVICE_MANA~::timeEvt}-->
   <attribute name="timeEvt" type="QTimeEvt" visibility="0x02" properties="0x00"/>
   <!--${AOs::GATT_DEVICE_MANA~::SM}-->
   <statechart properties="0x01">
    <!--${AOs::GATT_DEVICE_MANA~::SM::initial}-->
    <initial target="../1">
     <action>(void)par; /* unused parameter */
/* arm the private time event to expire in 1/2s
* and periodically every 1/2 second
*/
QTimeEvt_armX(&amp;me-&gt;timeEvt,
    BSP_TICKS_PER_SEC/2,
    BSP_TICKS_PER_SEC/2);</action>
     <initial_glyph conn="2,20,4,3,8,3">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::GATT_DEVICE_MANA~::SM::SCANNING}-->
    <state name="SCANNING">
     <entry>start_scan();
// List all connection info</entry>
     <exit>stop_scan()</exit>
     <!--${AOs::GATT_DEVICE_MANA~::SM::SCANNING::SCAN_TIMEOUT}-->
     <tran trig="SCAN_TIMEOUT">
      <action brief="start_scan()"/>
      <tran_glyph conn="5,56,3,-1,25">
       <action box="0,-2,19,5"/>
      </tran_glyph>
     </tran>
     <!--${AOs::GATT_DEVICE_MANA~::SM::SCANNING::FOUND_DEVICE}-->
     <tran trig="FOUND_DEVICE" target="../../2">
      <action>// Find next un-connected app id slot
// Connect to server
// Save connnecting server addr
</action>
      <tran_glyph conn="33,32,1,3,41">
       <action box="1,-2,29,8"/>
      </tran_glyph>
     </tran>
     <!--${AOs::GATT_DEVICE_MANA~::SM::SCANNING::GATT_DEVICE_DISCONNECTED}-->
     <tran trig="GATT_DEVICE_DISCONNECTED">
      <action>gattc_manager_disconnect_handler</action>
      <tran_glyph conn="5,66,3,-1,25">
       <action box="0,-2,28,6"/>
      </tran_glyph>
     </tran>
     <state_glyph node="5,24,28,121">
      <entry box="1,2,21,7"/>
      <exit box="1,9,20,7"/>
     </state_glyph>
    </state>
    <!--${AOs::GATT_DEVICE_MANA~::SM::CONNECTING}-->
    <state name="CONNECTING">
     <entry>Config timeout to connect timeout duration
Start timer timeout</entry>
     <exit>stop timer timeout</exit>
     <!--${AOs::GATT_DEVICE_MANA~::SM::CONNECTING::CONNECT_TIMEOUT}-->
     <tran trig="CONNECT_TIMEOUT" target="../../1">
      <tran_glyph conn="74,48,3,1,-41">
       <action box="-29,-2,16,3"/>
      </tran_glyph>
     </tran>
     <!--${AOs::GATT_DEVICE_MANA~::SM::CONNECTING::DEVICE_CONNECTED}-->
     <tran trig="DEVICE_CONNECTED">
      <action>Increase total connected device
</action>
      <!--${AOs::GATT_DEVICE_MANA~::SM::CONNECTING::DEVICE_CONNECTED::[Found_all_devices==true]}-->
      <choice target="../../../3">
       <guard brief="Found_all_devices == true"/>
       <choice_glyph conn="97,39,5,1,26,34,-15">
        <action box="2,-2,21,3"/>
       </choice_glyph>
      </choice>
      <!--${AOs::GATT_DEVICE_MANA~::SM::CONNECTING::DEVICE_CONNECTED::[else]}-->
      <choice target="../../../1">
       <guard brief="else"/>
       <choice_glyph conn="97,39,4,1,3,-64">
        <action box="-45,3,8,3"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="74,39,3,-1,23">
       <action box="-6,-2,24,8"/>
      </tran_glyph>
     </tran>
     <!--${AOs::GATT_DEVICE_MANA~::SM::CONNECTING::GATT_DEVICE_DISCONNECTED}-->
     <tran trig="GATT_DEVICE_DISCONNECTED" target="../../1">
      <action>gattc_manager_disconnect_handler()</action>
      <tran_glyph conn="74,54,3,1,-41">
       <action box="-32,-2,30,4"/>
      </tran_glyph>
     </tran>
     <state_glyph node="74,24,34,34">
      <entry box="1,2,33,7"/>
      <exit box="1,9,33,4"/>
     </state_glyph>
    </state>
    <!--${AOs::GATT_DEVICE_MANA~::SM::CONNECTED}-->
    <state name="CONNECTED">
     <documentation>All devices are connected</documentation>
     <entry>List all devices info
Config timeout to subsribe timeout duration
Start timer timeout
subscribe_retry = 0
Send subsribe msg to un-subsribe devices</entry>
     <exit>Stop timer timeout
</exit>
     <!--${AOs::GATT_DEVICE_MANA~::SM::CONNECTED::GATT_DEVICE_DISCONNECTED}-->
     <tran trig="GATT_DEVICE_DISCONNECTED" target="../../1">
      <action>gattc_manager_disconnect_handler()</action>
      <tran_glyph conn="74,75,3,1,-41">
       <action box="-33,-2,31,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::GATT_DEVICE_MANA~::SM::CONNECTED::DEVICE_SUBSCRIBED}-->
     <tran trig="DEVICE_SUBSCRIBED">
      <action>Increase total subsribed device
</action>
      <!--${AOs::GATT_DEVICE_MANA~::SM::CONNECTED::DEVICE_SUBSCRIBE~::[All_devices_subscribed==true]}-->
      <choice target="../../../4">
       <guard brief="All_devices_subscribed == true"/>
       <choice_glyph conn="94,90,5,1,29,37,-15">
        <action box="2,-3,25,3"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="74,90,3,-1,20">
       <action box="-8,-2,25,4"/>
      </tran_glyph>
     </tran>
     <!--${AOs::GATT_DEVICE_MANA~::SM::CONNECTED::SUBSCRIBE_TIMEOUT}-->
     <tran trig="SUBSCRIBE_TIMEOUT">
      <action>subscribe_retry++</action>
      <!--${AOs::GATT_DEVICE_MANA~::SM::CONNECTED::SUBSCRIBE_TIMEOU~::[else]}-->
      <choice target="../../../1">
       <guard brief="else"/>
       <choice_glyph conn="94,98,4,1,4,-61">
        <action box="-42,4,8,3"/>
       </choice_glyph>
      </choice>
      <!--${AOs::GATT_DEVICE_MANA~::SM::CONNECTED::SUBSCRIBE_TIMEOU~::[subscribe_retry<max_retry]}-->
      <choice>
       <guard brief="subscribe_retry  &lt;  max_retry"/>
       <action>Send subsribe msg to un-subsribe devices</action>
       <choice_glyph conn="94,98,5,-1,11">
        <action box="2,-2,41,4"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="74,98,3,-1,20">
       <action box="-8,-2,29,6"/>
      </tran_glyph>
     </tran>
     <state_glyph node="74,67,34,41">
      <entry box="1,2,32,12"/>
      <exit box="1,14,33,4"/>
     </state_glyph>
    </state>
    <!--${AOs::GATT_DEVICE_MANA~::SM::SUBSCRIBED}-->
    <state name="SUBSCRIBED">
     <documentation>// All devices are subscribed</documentation>
     <entry>Config timeout to sending duration
Start timer timeout
</entry>
     <exit>Stop timer timeout</exit>
     <!--${AOs::GATT_DEVICE_MANA~::SM::SUBSCRIBED::SENDING_TIMER_TRIGGER}-->
     <tran trig="SENDING_TIMER_TRIGGER">
      <action>for(uint8_t idx = 0; idx &lt; MAX_DE</action>
      <tran_glyph conn="74,137,3,-1,28">
       <action box="0,-2,30,6"/>
      </tran_glyph>
     </tran>
     <state_glyph node="74,117,34,47">
      <entry box="1,2,33,7"/>
      <exit box="1,9,32,5"/>
     </state_glyph>
    </state>
    <state_diagram size="168,193"/>
   </statechart>
  </class>
  <!--${AOs::Blinky_ctor}-->
  <operation name="Blinky_ctor" type="void" visibility="0x00" properties="0x01">
   <documentation>The Blinky &quot;constructor&quot; is provided outside of the Blinky class, so that it can be used independently from the class. This is part of the &quot;opaque pointer&quot; design idiom.</documentation>
   <code>Blinky *me = (Blinky *)AO_Blinky;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Blinky_initial));
QTimeEvt_ctorX(&amp;me-&gt;timeEvt, &amp;me-&gt;super, TIMEOUT_SIG, 0U);</code>
  </operation>
  <!--${AOs::GATT_DEVICE}-->
  <class name="GATT_DEVICE" superclass="qpc::QActive">
   <!--${AOs::GATT_DEVICE::SM}-->
   <statechart properties="0x00">
    <!--${AOs::GATT_DEVICE::SM::initial}-->
    <initial target="../1">
     <initial_glyph conn="15,26,5,3,18">
      <action box="0,-2,17,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::GATT_DEVICE::SM::DEV_RESET}-->
    <state name="DEV_RESET">
     <entry>ble_gattc_profile_clear()
Active_post((Active*)p_gattc_manger, &amp;gatt_device_disconnect_evt);
</entry>
     <!--${AOs::GATT_DEVICE::SM::DEV_RESET::GATT_DEVICE_CONNECTED}-->
     <tran trig="GATT_DEVICE_CONNECTED" target="../../2">
      <tran_glyph conn="61,22,1,3,25">
       <action box="1,-2,26,4"/>
      </tran_glyph>
     </tran>
     <state_glyph node="33,15,28,29">
      <entry box="1,2,27,11"/>
     </state_glyph>
    </state>
    <!--${AOs::GATT_DEVICE::SM::DEV_CONNECTED}-->
    <state name="DEV_CONNECTED">
     <entry>Active_post((Active*)p_gattc_manger, &amp;gatt_device_connect_evt);
</entry>
     <!--${AOs::GATT_DEVICE::SM::DEV_CONNECTED::GATT_DEVICE_DISCONNECTED}-->
     <tran trig="GATT_DEVICE_DISCONNECTED" target="../../1">
      <tran_glyph conn="86,34,3,1,-25">
       <action box="-24,-2,24,3"/>
      </tran_glyph>
     </tran>
     <!--${AOs::GATT_DEVICE::SM::DEV_CONNECTED::GATT_DEVICE_SUBSCRIBED}-->
     <tran trig="GATT_DEVICE_SUBSCRIBED" target="../../3">
      <tran_glyph conn="115,23,1,1,17,37,-16">
       <action box="4,-3,23,4"/>
      </tran_glyph>
     </tran>
     <state_glyph node="86,14,29,30">
      <entry box="1,2,28,8"/>
     </state_glyph>
    </state>
    <!--${AOs::GATT_DEVICE::SM::DEV_SUBSCRIBED}-->
    <state name="DEV_SUBSCRIBED">
     <entry>Active_post((Active*)p_gattc_manger, &amp;gatt_device_subscribe_evt);
</entry>
     <exit>Active_post((Active*)p_gattc_manger, &amp;gatt_device_unsubscribe_evt);
</exit>
     <!--${AOs::GATT_DEVICE::SM::DEV_SUBSCRIBED::GATT_DEVICE_UNSUBSCRIBED}-->
     <tran trig="GATT_DEVICE_UNSUBSCRIBED" target="../../2">
      <tran_glyph conn="86,59,3,3,-16,-21,16">
       <action box="-25,1,28,3"/>
      </tran_glyph>
     </tran>
     <!--${AOs::GATT_DEVICE::SM::DEV_SUBSCRIBED::GATT_DEVICE_DISCONNECTED}-->
     <tran trig="GATT_DEVICE_DISCONNECTED" target="../../1">
      <tran_glyph conn="86,71,3,3,-62,-37,9">
       <action box="-25,-3,24,3"/>
      </tran_glyph>
     </tran>
     <!--${AOs::GATT_DEVICE::SM::DEV_SUBSCRIBED::GATT_DEVICE_DATA_AVAILABLE}-->
     <tran trig="GATT_DEVICE_DATA_AVAILABLE">
      <action>Active_post((Active*)p_gattc_manger, 
&amp;gatt_device_X_data_available_evt);</action>
      <tran_glyph conn="86,76,3,-1,27">
       <action box="0,-2,31,6"/>
      </tran_glyph>
     </tran>
     <state_glyph node="86,52,30,28">
      <entry box="1,2,28,9"/>
      <exit box="1,11,29,9"/>
     </state_glyph>
    </state>
    <state_diagram size="168,101"/>
   </statechart>
  </class>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::blinky.c}-->
  <file name="blinky.c">
   <text>#include &quot;qpc.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */

/* ask QM to declare the Blinky class --------------------------------------*/
$declare${AOs::Blinky}

/* instantiate the Blinky active object ------------------------------------*/
static Blinky l_blinky;
QActive * const AO_Blinky = &amp;l_blinky.super;

/* ask QM to define the Blinky class ---------------------------------------*/
$define${AOs::Blinky_ctor}
$define${AOs::Blinky}</text>
  </file>
  <!--${.::bsp.h}-->
  <file name="bsp.h">
   <text>#ifndef BSP_H
#define BSP_H

/* a very simple Board Support Package (BSP) -------------------------------*/
enum { BSP_TICKS_PER_SEC = 100 }; /* number of clock ticks in a second */
void BSP_init(void);
void BSP_ledOff(void);
void BSP_ledOn(void);

/* define the event signals used in the application ------------------------*/
enum BlinkySignals {
    TIMEOUT_SIG = Q_USER_SIG, /* offset the first signal by Q_USER_SIG */
    MAX_SIG /* keep last (the number of signals) */
};

/* active object(s) used in this application -------------------------------*/
extern QActive * const AO_Blinky; /* opaque pointer to the Blinky AO */
$declare${AOs::Blinky_ctor}

#endif /* BSP_H */</text>
  </file>
  <!--${.::bsp.c}-->
  <file name="bsp.c">
   <text>/* Board Support Package implementation for desktop OS (Windows, Linux, MacOS) */
#include &quot;qpc.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */
#include &lt;stdio.h&gt;  /* for printf()/fprintf() */
#include &lt;stdlib.h&gt; /* for exit() */

void BSP_init(void)   {
    printf(&quot;Simple Blinky example\n&quot;
           &quot;QP/C version: %s\n&quot;
           &quot;Press Ctrl-C to quit...\n&quot;,
           QP_VERSION_STR);
}
void BSP_ledOff(void) { printf(&quot;LED OFF\n&quot;); }
void BSP_ledOn(void)  { printf(&quot;LED ON\n&quot;);  }

/* callback functions needed by the framework ------------------------------*/
void QF_onStartup(void) {}
void QF_onCleanup(void) {}
void QF_onClockTick(void) {
    QF_TICK_X(0U, (void *)0); /* QF clock tick processing for rate 0 */
}
void Q_onAssert(char const * const module, int loc) {
    fprintf(stderr, &quot;Assertion failed in %s:%d&quot;, module, loc);
    exit(-1);
}</text>
  </file>
  <!--${.::main.c}-->
  <file name="main.c">
   <text>#include &quot;qpc.h&quot;    /* QP/C framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */

Q_DEFINE_THIS_FILE

/* the main function -------------------------------------------------------*/
int main() {
    static QEvt const *blinky_queueSto[10]; /* event queue buffer for Blinky */

    QF_init();  /* initialize the framework */
    BSP_init(); /* initialize the BSP */

    /* instantiate and start the Blinky active object */
    Blinky_ctor(); /* in C you must explicitly call the Blinky constructor */
    QACTIVE_START(AO_Blinky, /* active object to start */
        1U,                  /* priority of the active object */
        blinky_queueSto,     /* event queue buffer */
        Q_DIM(blinky_queueSto), /* the length of the buffer */
        (void *)0, 0U,       /* private stack (not used) */
        (QEvt *)0);          /* initialization event (not used) */

    return QF_run(); /* let the framework run the application */
}</text>
  </file>
  <!--${.::Makefile}-->
  <file name="Makefile">
   <text># Makefile for building QP/C application on Windows and POSIX hosts
#
# examples of invoking this Makefile:
# building configurations: Debug (default), Release, and Spy
# make
# make CONF=rel
# make CONF=spy
# make clean   # cleanup the build
# make CONF=spy clean   # cleanup the build
#
# NOTE:
# To use this Makefile on Windows, you will need the GNU make utility, which
# is included in the QTools collection for Windows, see:
#    https://sourceforge.net/projects/qpc/files/QTools/
#

#-----------------------------------------------------------------------------
# project name:
#
PROJECT := blinky

#-----------------------------------------------------------------------------
# project directories:
#

# list of all source directories used by this project
VPATH := . \

# list of all include directories needed by this project
INCLUDES := -I. \

# location of the QP/C framework (if not provided in an env. variable)
ifeq ($(QPC),)
QPC := ../../..
endif

#-----------------------------------------------------------------------------
# project files:
#

# C source files...
C_SRCS := \
    blinky.c \
    bsp.c \
    main.c

# C++ source files...
CPP_SRCS :=

LIB_DIRS  :=
LIBS      :=

# defines...
# QP_API_VERSION controls the QP API compatibility; 9999 means the latest API
DEFINES   := -DQP_API_VERSION=9999

ifeq (,$(CONF))
    CONF := dbg
endif

#-----------------------------------------------------------------------------
# add QP/C framework (depends on the OS this Makefile runs on):
#
ifeq ($(OS),Windows_NT)

# NOTE:
# For Windows hosts, you can choose:
# - the single-threaded QP/C port (win32-qv) or
# - the multithreaded QP/C port (win32).
#
QP_PORT_DIR := $(QPC)/ports/win32-qv
#QP_PORT_DIR := $(QPC)/ports/win32
LIB_DIRS += -L$(QP_PORT_DIR)/$(CONF)
LIBS     += -lqp -lws2_32

else

# NOTE:
# For POSIX hosts (Linux, MacOS), you can choose:
# - the single-threaded QP/C port (win32-qv) or
# - the multithreaded QP/C port (win32).
#
QP_PORT_DIR := $(QPC)/ports/posix-qv
#QP_PORT_DIR := $(QPC)/ports/posix

C_SRCS += \
    qep_hsm.c \
    qep_msm.c \
    qf_act.c \
    qf_actq.c \
    qf_defer.c \
    qf_dyn.c \
    qf_mem.c \
    qf_ps.c \
    qf_qact.c \
    qf_qeq.c \
    qf_qmact.c \
    qf_time.c \
    qf_port.c

QS_SRCS := \
    qs.c \
    qs_64bit.c \
    qs_rx.c \
    qs_fp.c \
    qs_port.c

LIBS += -lpthread

endif

#============================================================================
# Typically you should not need to change anything below this line

VPATH    += $(QPC)/src/qf $(QP_PORT_DIR)
INCLUDES += -I$(QPC)/include -I$(QPC)/src -I$(QP_PORT_DIR)

#-----------------------------------------------------------------------------
# GNU toolset:
#
# NOTE:
# GNU toolset (MinGW) is included in the QTools collection for Windows, see:
#     http://sourceforge.net/projects/qpc/files/QTools/
# It is assumed that %QTOOLS%\bin directory is added to the PATH
#
CC    := gcc
CPP   := g++
LINK  := gcc    # for C programs
#LINK  := g++   # for C++ programs

#-----------------------------------------------------------------------------
# basic utilities (depends on the OS this Makefile runs on):
#
ifeq ($(OS),Windows_NT)
    MKDIR      := mkdir
    RM         := rm
    RMDIR      := rmdir
    TARGET_EXT := .exe
else ifeq ($(OSTYPE),cygwin)
    MKDIR      := mkdir -p
    RM         := rm -f
    RMDIR      := rmdir
    TARGET_EXT := .exe
else
    MKDIR      := mkdir -p
    RM         := rm -f
    RMDIR      := rmdir
    TARGET_EXT :=
endif

#-----------------------------------------------------------------------------
# build configurations...

ifeq (rel, $(CONF)) # Release configuration ..................................

BIN_DIR := build_rel
# gcc options:
CFLAGS  = -c -O3 -fno-pie -std=c11 -pedantic -Wall -Wextra -W \
    $(INCLUDES) $(DEFINES) -DNDEBUG

CPPFLAGS = -c -O3 -fno-pie -std=c++11 -pedantic -Wall -Wextra \
    -fno-rtti -fno-exceptions \
    $(INCLUDES) $(DEFINES) -DNDEBUG

else ifeq (spy, $(CONF))  # Spy configuration ................................

BIN_DIR := build_spy

C_SRCS   += $(QS_SRCS)
VPATH    += $(QPC)/src/qs

# gcc options:
CFLAGS  = -c -g -O -fno-pie -std=c11 -pedantic -Wall -Wextra -W \
    $(INCLUDES) $(DEFINES) -DQ_SPY

CPPFLAGS = -c -g -O -fno-pie -std=c++11 -pedantic -Wall -Wextra \
    -fno-rtti -fno-exceptions \
    $(INCLUDES) $(DEFINES) -DQ_SPY

else # default Debug configuration .........................................

BIN_DIR := build

# gcc options:
CFLAGS  = -c -g -O -fno-pie -std=c11 -pedantic -Wall -Wextra -W \
    $(INCLUDES) $(DEFINES)

CPPFLAGS = -c -g -O -fno-pie -std=c++11 -pedantic -Wall -Wextra \
    -fno-rtti -fno-exceptions \
    $(INCLUDES) $(DEFINES)

endif  # .....................................................................

ifndef GCC_OLD
    LINKFLAGS := -no-pie
endif

#-----------------------------------------------------------------------------
C_OBJS       := $(patsubst %.c,%.o,   $(C_SRCS))
CPP_OBJS     := $(patsubst %.cpp,%.o, $(CPP_SRCS))

TARGET_EXE   := $(BIN_DIR)/$(PROJECT)$(TARGET_EXT)
C_OBJS_EXT   := $(addprefix $(BIN_DIR)/, $(C_OBJS))
C_DEPS_EXT   := $(patsubst %.o,%.d, $(C_OBJS_EXT))
CPP_OBJS_EXT := $(addprefix $(BIN_DIR)/, $(CPP_OBJS))
CPP_DEPS_EXT := $(patsubst %.o,%.d, $(CPP_OBJS_EXT))

# create $(BIN_DIR) if it does not exist
ifeq (&quot;$(wildcard $(BIN_DIR))&quot;,&quot;&quot;)
$(shell $(MKDIR) $(BIN_DIR))
endif

#-----------------------------------------------------------------------------
# rules
#

all: $(TARGET_EXE)

$(TARGET_EXE) : $(C_OBJS_EXT) $(CPP_OBJS_EXT)
    $(CC) $(CFLAGS) $(QPC)/include/qstamp.c -o $(BIN_DIR)/qstamp.o
    $(LINK) $(LINKFLAGS) $(LIB_DIRS) -o $@ $^ $(BIN_DIR)/qstamp.o $(LIBS)

$(BIN_DIR)/%.d : %.c
    $(CC) -MM -MT $(@:.d=.o) $(CFLAGS) $&lt; &gt; $@

$(BIN_DIR)/%.d : %.cpp
    $(CPP) -MM -MT $(@:.d=.o) $(CPPFLAGS) $&lt; &gt; $@

$(BIN_DIR)/%.o : %.c
    $(CC) $(CFLAGS) $&lt; -o $@

$(BIN_DIR)/%.o : %.cpp
    $(CPP) $(CPPFLAGS) $&lt; -o $@

.PHONY : clean show

# include dependency files only if our goal depends on their existence
ifneq ($(MAKECMDGOALS),clean)
  ifneq ($(MAKECMDGOALS),show)
-include $(C_DEPS_EXT) $(CPP_DEPS_EXT)
  endif
endif

.PHONY : clean show

clean :
    $(RM) $(BIN_DIR)/*.*
    $(RMDIR) $(BIN_DIR)

show :
    @echo PROJECT      = $(PROJECT)
    @echo TARGET_EXE   = $(TARGET_EXE)
    @echo VPATH        = $(VPATH)
    @echo C_SRCS       = $(C_SRCS)
    @echo CPP_SRCS     = $(CPP_SRCS)
    @echo C_DEPS_EXT   = $(C_DEPS_EXT)
    @echo C_OBJS_EXT   = $(C_OBJS_EXT)
    @echo C_DEPS_EXT   = $(C_DEPS_EXT)
    @echo CPP_DEPS_EXT = $(CPP_DEPS_EXT)
    @echo CPP_OBJS_EXT = $(CPP_OBJS_EXT)
    @echo LIB_DIRS     = $(LIB_DIRS)
    @echo LIBS         = $(LIBS)
    @echo DEFINES      = $(DEFINES)

</text>
  </file>
 </directory>
</model>
